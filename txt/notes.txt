porta: 5432
senha: 123456

============================================= [Precisei Instalar ] =============================================

Microsoft Visual C++
https://learn.microsoft.com/pt-br/cpp/windows/latest-supported-vc-redist?view=msvc-170

====================================================================================================
Adicionar Python ao PATH:

Se você tem o Python instalado, mas o comando pip não é reconhecido, você precisa adicionar a pasta de scripts do Python ao seu PATH.

Abra o Explorador de Arquivos e vá até o diretório onde o Python está instalado. Normalmente, isso estará em "C:\PythonXX" (onde "XX" é a versão do Python) ou em "C:\Users<seu_nome_de_usuário>\AppData\Local\Programs\Python\PythonXX" no Windows.

Dentro dessa pasta, você encontrará uma pasta chamada "Scripts". Copie o caminho completo para essa pasta.

Agora, adicione o caminho à pasta de scripts ao seu PATH:

Clique com o botão direito do mouse no ícone do Windows e selecione "Sistema".
Clique em "Configurações avançadas do sistema".
Na guia "Avançado", clique no botão "Variáveis de Ambiente".
Na seção "Variáveis de Sistema", encontre a variável "Path" e clique em "Editar".
Na janela "Editar Variável de Sistema", clique em "Novo" e cole o caminho que você copiou anteriormente.
Clique em "OK" para fechar todas as janelas.
Depois de adicionar o caminho ao PATH, abra um novo terminal (PowerShell ou Prompt de Comando) e tente executar o comando pip novamente. Deve funcionar agora.

========================================================================================================
TRATAMENTOS


# Verificar se os campos obrigatórios estão presentes e não vazios
if "nome" not in data or not data["nome"] or "sobrenome" not in data or not data["sobrenome"]:
    return jsonify({"error": "Nome e sobrenome são campos obrigatórios"}), 400

# Validar o formato do email
# Validação de Formato: Verifique se os campos possuem o formato correto. Por exemplo, você pode validar se o email está em um formato válido usando expressões regulares.

email = data.get("email")
if email and not re.match(r"[^@]+@[^@]+\.[^@]+", email):
    return jsonify({"error": "Email em formato inválido"}), 400



#Tratamento de Erros Genéricos: 
# Você também pode incluir tratamento de erros genéricos para outros tipos de exceções que possam ocorrer.
except Exception as e:
    # Tratamento de erro genérico
    return jsonify({"error": str(e)}), 500


#Tratamento de Erros do Banco de Dados: 
# Para lidar com erros ao inserir dados no banco de dados, você pode capturar exceções do PostgreSQL e retornar mensagens de erro apropriadas.
try:
    # ... código de inserção no banco de dados ...
except psycopg2.Error as e:
    # Tratamento de erro específico do PostgreSQL
    return jsonify({"error": str(e)}), 500

========================================================================================================
-------------> INSTALANDO AMBIENTE VIRTUAL
python -m ensurepip
python -m pip install virtualenv
pip3 install virtualenv
virtualenv env

env/Scripts/activate

-> NO POWERSHELL: Set-ExecutionPolicy Unrestricted

pip3 install flask flask-sqlalchemy

pip3 install pg8000
pip3 install psycopg2
pip3 install psycopg2-binary


-------------> INSTALANDO BANCO DE DADOS
activate
python
from app import app, db

# Cria um contexto de aplicação Flask
app.app_context().push()

# Agora você pode criar as tabelas
db.create_all()
