# =-=-= [CRUD Catadores] =-=-=
@app.route('/catadores', methods=['POST'])
def create_catador():
    data = request.json
    new_catador = Catadores(**data)
    
    try:
        db.session.add(new_catador)
        db.session.commit()
        return jsonify({'message': 'Catador criado com sucesso'}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 400
    
# Rota para listar todos os catadores
@app.route('/catadores', methods=['GET'])
def get_catadores():
    catadores = Catadores.query.all()
    result = [{'id': catador.id, 'nome': catador.nome, 'sobrenome': catador.sobrenome} for catador in catadores]
    return jsonify(result)

# Rota para obter um catador específico por ID
@app.route('/catadores/<int:id>', methods=['GET'])
def get_catador(id):
    catador = Catadores.query.get(id)
    if catador:
        return jsonify({'id': catador.id, 'nome': catador.nome, 'sobrenome': catador.sobrenome})
    return jsonify({'message': 'Catador não encontrado'}), 404

# Rota para atualizar um catador por ID
@app.route('/catadores/<int:id>', methods=['PUT'])
def update_catador(id):
    data = request.json
    catador = Catadores.query.get(id)
    if catador:
        for key, value in data.items():
            setattr(catador, key, value)
        db.session.commit()
        return jsonify({'message': 'Catador atualizado com sucesso'})
    return jsonify({'message': 'Catador não encontrado'}), 404

# Rota para excluir um catador por ID
@app.route('/catadores/<int:id>', methods=['DELETE'])
def delete_catador(id):
    catador = Catadores.query.get(id)
    if catador:
        db.session.delete(catador)
        db.session.commit()
        return jsonify({'message': 'Catador excluído com sucesso'})
    return jsonify({'message': 'Catador não encontrado'}), 404